#!/usr/bin/env bash

set -e

function __cleanup ()
{
	__delete_lock
}

function __create_lock ()
{
	if [[ -n ${lock_file} ]]
	then
		touch "${lock_file}"
	fi
}

function __create_state ()
{
	if [[ -n ${state_file} ]]
	then
		touch "${state_file}"
	fi
}

function __delete_lock ()
{
	if [[ -f ${lock_file} ]]
	then
		rm -f "${lock_file}"
	fi
}

function __get_memcached_cachesize ()
{
	local -r default_value="${1:-64}"

	local value="${MEMCACHED_CACHESIZE}"

	if ! __is_valid_memcached_cachesize "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_memcached_maxconn ()
{
	local -r default_value="${1:-1024}"

	local value="${MEMCACHED_MAXCONN}"

	if ! __is_valid_memcached_maxconn "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_memcached_options ()
{
	local value="${MEMCACHED_OPTIONS}"

	printf -- '%s' "${value}"
}

function __get_options ()
{
	local -r cachesize="${1:-"$(
		__get_memcached_cachesize
	)"}"
	local -r maxconn="${2:-"$(
		__get_memcached_maxconn
	)"}"
	local -r options="${3:-"$(
		__get_memcached_options
	)"}"
	local -r port="11211"
	local -r user="memcached"

	printf -- \
		'-u %s -p %u -m %u -c %u%s%s' \
		"${user}" \
		"${port}" \
		"${cachesize}" \
		"${maxconn}" \
		"${options:+" "}" \
		"${options}"
}

function __get_timer_total ()
{
	local -r timer_end="$(
		date -u +%s.%N
	)"
	local -r timer_start="${1}"

	if [[ -z ${timer_start} ]] \
		|| [[ ${timer_start//.} -gt ${timer_end//.} ]]
	then
		>&2 printf -- \
			'ERROR: invalid timer start: %s\n' \
			"${timer_start}"
		printf -- \
			'0.000000'
	else
		awk \
			-v timer_end="${timer_end}" \
			-v timer_start="${timer_start}" \
			'BEGIN { print \
				timer_end - timer_start;
			}'
	fi
}

function __is_valid_memcached_cachesize ()
{
	__is_valid_non_zero_integer "${@}"
}

function __is_valid_memcached_maxconn ()
{
	__is_valid_non_zero_integer "${@}"
}

function __is_valid_non_zero_integer ()
{
	local -r non_zero_integer='^[1-9][0-9]*$'
	local -r value="${1}"

	if [[ ${value} =~ ${non_zero_integer} ]]
	then
		return 0
	fi

	return 1
}

function main ()
{
	local -r bin="/usr/bin/memcached"
	local -r lock_file="/var/lock/subsys/memcached-wrapper"
	local -r nice="/bin/nice"
	local -r niceness="0"
	local -r state_file="/var/lib/misc/memcached-wrapper"
	local -r timer_start="$(
		date -u +%s.%N
	)"

	local memcached_cachesize
	local memcached_maxconn
	local memcached_options
	local options
	local timer_total
	local verbose="false"

	while [[ "${#}" -gt 0 ]]
	do
		case "${1}" in
			-v|--verbose)
				verbose="true"
				shift 1
				;;
		esac
	done

	if [[ -f ${state_file} ]]
	then
		if [[ ${verbose} == true ]]
		then
			printf -- \
				'INFO: %s finished - skipping.\n' \
				"${0##*/}"
		fi
		exit 0
	fi

	if [[ -f ${lock_file} ]]
	then
		>&2 printf -- \
			'ERROR: %s lock detected - aborting.\n' \
			"${0##*/}"
		exit 1
	fi

	trap "__cleanup" \
		INT TERM EXIT
	__create_lock

	if [[ ${verbose} == true ]] \
		&& [[ ! -f ${state_file} ]]
	then
		memcached_cachesize="$(
			__get_memcached_cachesize
		)"
		memcached_maxconn="$(
			__get_memcached_maxconn
		)"
		memcached_options="$(
			__get_memcached_options
		)"

		options="$(
			__get_options \
				"${memcached_cachesize}" \
				"${memcached_maxconn}" \
				"${memcached_options}"
		)"

		timer_total="$(
			__get_timer_total \
				"${timer_start}"
		)"

		cat \
			<<-EOT

			================================================================================
			Memcached Details
			--------------------------------------------------------------------------------
			cachesize : ${memcached_cachesize}
			maxconn: ${memcached_maxconn}
			memcached options: ${memcached_options}
			--------------------------------------------------------------------------------
			${timer_total}

		EOT
	else
		options="$(
			__get_options
		)"
	fi

	if [[ ${verbose} == true ]]
	then
		printf -- \
			'INFO: %s starting %s\n' \
			"${0##*/}" \
			"${bin##*/}"
	fi

	__create_state
	__cleanup
	trap - \
		INT TERM EXIT

	exec ${nice} \
		-n ${niceness} \
		${bin} \
		${options}
}

main "${@}"
